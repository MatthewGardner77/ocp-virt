#- name: Get vSphere login session
#  ansible.builtin.uri:
#    url: "https://{{ vcenter_hostname }}/rest/com/vmware/cis/session"
#    method: POST
#    headers:
#      Content-Type: "application/json"
#    body_format: json
#    force_basic_auth: true
#    url_username: "{{ vcenter_username }}"
#    url_password: "{{ vcenter_password }}"
#  register: login_response
#
#- name: Get list of datastores
#  ansible.builtin.uri:
#    url: "https://{{ vcenter_hostname }}/rest/vcenter/datastore"
#    method: GET
#    headers:
#      Content-Type: "application/json"
#      vmware-api-session-id: "{{ login_response.json.value }}"
#  register: datastore_response

#- name: datastores
#  ansible.builtin.debug:
#    var: datastore_response
#
#- name: collect a list of the datacenters
#  vmware.vmware_rest.vcenter_datacenter_info:
#    vcenter_hostname: "{{ vcenter_hostname }}"
#    vcenter_password: "{{ vcenter_password }}"
#    vcenter_username: "{{ vcenter_username }}"
#  register: my_datacenters
#
#- name: my datacenters
#  ansible.builtin.debug:
#    var: my_datacenters
#
#- name: Get a list of the hosts
#  vmware.vmware_rest.vcenter_host_info:
#    vcenter_hostname: "{{ vcenter_hostname }}"
#    vcenter_password: "{{ vcenter_password }}"
#    vcenter_username: "{{ vcenter_username }}"
#  register: my_hosts
#
#- name: my hosts
#  ansible.builtin.debug:
#    var: my_hosts
#
#- name: Build a list of all the clusters
#  vmware.vmware_rest.vcenter_cluster_info:
#    vcenter_hostname: "{{ vcenter_hostname }}"
#    vcenter_password: "{{ vcenter_password }}"
#    vcenter_username: "{{ vcenter_username }}"
#  register: all_the_clusters
#
#- name: all clusters
#  ansible.builtin.debug:
#    var: all_the_clusters

- name: Build a list of all the folders
  vmware.vmware_rest.vcenter_folder_info:
    vcenter_hostname: "{{ vcenter_hostname }}"
    vcenter_password: "{{ vcenter_password }}"
    vcenter_username: "{{ vcenter_username }}"
  register: all_folders

#- name: my folders
#  ansible.builtin.debug:
#    var: all_folders

- name: Filter VM folders
  set_fact:
    vm_folders: "{{ all_folders.value | selectattr('type', 'equalto', 'VIRTUAL_MACHINE') | list }}"

- name: Check each VM folder for VMs
  vmware.vmware_rest.vcenter_vm_info:
    vcenter_hostname: "{{ vcenter_hostname }}"
    vcenter_password: "{{ vcenter_password }}"
    vcenter_username: "{{ vcenter_username }}"
    folders: "{{ item.folder }}"
  register: vm_folders_with_vms
  loop: "{{ vm_folders }}"
  when: vm_folders | length > 0

- name: Display VM names and IDs
  debug:
    msg: "VM Name: {{ item.name }}, VM ID: {{ item.vm }}"
  loop: "{{ vm_folders_with_vms.results | map(attribute='value') | flatten }}"
  when: item | length > 0
  loop_control:
    label: "{{ item.name }}"

- name: Collect VM names and IDs
  set_fact:
    vm_name_id_pairs: "{{ vm_name_id_pairs | default([]) + [{'name': item.name, 'vm': item.vm}] }}"
  loop: "{{ vm_folders_with_vms.results | map(attribute='value') | flatten }}"
  when: item | length > 0

- name: Prepare VMs for Plan spec
  set_fact:
    vms_for_plan_spec: "{{ vms_for_plan_spec | default([]) + [{'hooks': [], 'id': vm_id.vm}] }}"
  loop: "{{ vm_name_id_pairs }}"
  loop_control:
    loop_var: vm_id
  when: vm_id.name in user_selected_vm_names

- name: Get information for the distributed port group 'segment-migrating-to-ocpvirt'
  vmware.vmware_rest.vcenter_network_info:
    vcenter_hostname: "{{ vcenter_hostname }}"
    vcenter_password: "{{ vcenter_password }}"
    vcenter_username: "{{ vcenter_username }}"
    filter_types: DISTRIBUTED_PORTGROUP
  register: my_portgroup

- name: Capture the distrivuted portgroup id to make network mappings
  set_fact: 
    portgroup_id: "{{ my_portgroup.value[0].network }}"

- name: Create or update a NetworkMap
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: forklift.konveyor.io/v1beta1
      kind: NetworkMap
      metadata:
        name: "{{ networkmap_name }}"
        namespace: openshift-mtv
      spec:
        map:
          - destination:
              type: pod
            source:
              id: "{{ portgroup_id }}"
        provider:
          destination:
            name: host
            namespace: openshift-mtv
          source:
            name: vmware
            namespace: openshift-mtv

- name: Build a list of all the datastores
  vmware.vmware_rest.vcenter_datastore_info:
    vcenter_hostname: "{{ vcenter_hostname }}"
    vcenter_password: "{{ vcenter_password }}"
    vcenter_username: "{{ vcenter_username }}"
  register: all_the_datastores

- name: Capture the datastore id
  set_fact:
    datastore_id: "{{ all_the_datastores.value[0].datastore }}"

- name: Create or update a StorageMap
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: forklift.konveyor.io/v1beta1
      kind: StorageMap
      metadata:
        name: "{{ storagemap_name }}"
        namespace: openshift-mtv
      spec:
        map:
          - destination:
              storageClass: ocs-storagecluster-ceph-rbd
            source:
              id: "{{ datastore_id }}"
        provider:
          destination:
            name: host
            namespace: openshift-mtv
          source:
            name: vmware
            namespace: openshift-mtv


- name: Deploy Virt Plan
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: forklift.konveyor.io/v1beta1
      kind: Plan
      metadata:
        name: "{{ plan_name }}"
        namespace: openshift-mtv
      spec:
        archived: false
        description: ''
        map:
          network:
            name: "{{ networkmap_name }}"
            namespace: openshift-mtv
          storage:
            name: "{{ storagemap_name }}"
            namespace: openshift-mtv
        provider:
          destination:
            name: host
            namespace: openshift-mtv
          source:
            name: vmware
            namespace: openshift-mtv
        targetNamespace: openshift-mtv
        vms: "{{ vms_for_plan_spec }}"
        warm: false
